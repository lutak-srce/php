; xdebug.profiler_enable_trigger
; Type: integer, Default value: 0
;	When this setting is set to 1, you can trigger
; 	the generation of profiler files by using the
;	XDEBUG_PROFILE GET/POST parameter, or set a
;	cookie with the name XDEBUG_PROFILE. This will
;	then write the profiler data to defined directory.
;	In order to prevent the profiler to generate
;	profile files for each request, you need to set
;	xdebug.profiler_enable to 0.
xdebug.profiler_enable_trigger = 1

; xdebug.profiler_output_dir
; Type: string, Default value: /tmp
;	The directory where the profiler output will be
;	written to, make sure that the user who the PHP
;	will be running as has write permissions to that
;	directory. This setting can not be set in your
;	script with ini_set().
xdebug.profiler_output_dir = /tmp/xdebug

; xdebug.profiler_output_name
; Type: string, Default value: cachegrind.out.%p
;	This setting determines the name of the file that
;	is used to dump traces into. The setting specifies
;	the format with format specifiers, very similar to
;	sprintf() and strftime(). There are several format
;	specifiers that can be used to format the file name.
xdebug.profiler_output_name = xdebug.%s.%t

;xdebug.remote_enable
;Type: boolean, Default value: 0
;	This switch controls whether Xdebug should try to
;	contact a debug client which is listening on the host
;	and port as set with the settings xdebug.remote_host
;	and xdebug.remote_port. If a connection can not be
;	 established the script will just continue as if this
;	setting was 0.
xdebug.remote_enable = 1

; xdebug.remote_host
; Type: string, Default value: localhost
;	Selects the host where the debug client is running,
;	you can either use a host name or an IP address. This
;	setting is ignored if xdebug.remote_connect_back is
;	enabled.

; xdebug.remote_connect_back
; Type: boolean, Default value: 0, Introduced in Xdebug 2.1
;	If enabled, the xdebug.remote_host setting is ignored
;	and Xdebug will try to connect to the client that made
;	the HTTP request. It checks the $_SERVER['REMOTE_ADDR']
;	variable to find out which IP address to use. Please
;	note that there is no filter available, and anybody
;	who can connect to the webserver will then be able to
;	start a debugging session, even if their address does
;	not match xdebug.remote_host.
xdebug.remote_connect_back = 1

; xdebug.show_mem_delta
; Type: integer, Default value: 0
;	When this setting is set to something != 0 Xdebug's
;	human-readable generated trace files will show the
;	difference in memory usage between function calls.
;	If Xdebug is configured to generate computer-readable
;	trace files then they will always show this information.
xdebug.show_mem_delta = 1

; xdebug.var_display_max_data
; Type: integer, Default value: 512
;	Controls the maximum string length that is shown when variables
;	are displayed with either xdebug_var_dump(),
;	xdebug.show_local_vars or through Function Traces. This setting
;	does not have any influence on the amount of data that is send
;	to the client through the Remote Debugging feature.
xdebug.var_display_max_data = 32768

;xdebug.max_nesting_level
; Type: integer, Default value: 100
;	Controls the protection mechanism for infinite recursion
;	protection. The value of this setting is the maximum level
;	of nested functions that are allowed before the script will
;	be aborted.
xdebug.max_nesting_level = 200

;xdebug.scream
; Type: boolean, Default value: 0
;	If this setting is 1, then Xdebug will disable the @ (shut-up)
;	 operator so that notices, warnings and errors are no longer hidden.
xdebug.scream = 0
