; Enable Zend OPcache extension module
zend_extension=opcache.so

; Determines if Zend OPCache is enabled
opcache.enable=<%= @enable %>

; Determines if Zend OPCache is enabled for the CLI version of PHP
;opcache.enable_cli=<%= @enable_cli %>

; The OPcache shared memory storage size.
opcache.memory_consumption=<%= @memory_consumption %>

; The amount of memory for interned strings in Mbytes.
opcache.interned_strings_buffer=<%= @interned_strings_buffer %>

; The maximum number of keys (scripts) in the OPcache hash table.
; Only numbers between 200 and 1000000 are allowed.
opcache.max_accelerated_files=<%= @max_accelerated_files %>

; The maximum percentage of "wasted" memory until a restart is scheduled.
opcache.max_wasted_percentage=5

; When this directive is enabled, the OPcache appends the current working
; directory to the script key, thus eliminating possible collisions between
; files with the same name (basename). Disabling the directive improves
; performance, but may break existing applications.
opcache.use_cwd=<%= @use_cwd %>

; When disabled, you must reset the OPcache manually or restart the
; webserver for changes to the filesystem to take effect.
opcache.validate_timestamps=<%= @validate_timestamps %>

; How often (in seconds) to check file timestamps for changes to the shared
; memory storage allocation. ("1" means validate once per second, but only
; once per request. "0" means always validate)
opcache.revalidate_freq=<%= @revalidate_freq %>

; Enables or disables file search in include_path optimization
opcache.revalidate_path=<%= @revalidate_path %>

; If disabled, all PHPDoc comments are dropped from the code to reduce the
; size of the optimized code.
opcache.save_comments=<%= @save_comments %>

; Depending on the used Memory Manager this may cause some incompatibilities.
opcache.fast_shutdown=<%= @fast_shutdown %>

; Allow file existence override (file_exists, etc.) performance feature.
opcache.enable_file_override=<%= @enable_file_override %>

; A bitmask, where each bit enables or disables the appropriate OPcache
; passes
opcache.optimization_level=<%= @optimization_level %>

;opcache.inherited_hack=1
opcache.dups_fix=<%= @dups_fix %>

; The location of the OPcache blacklist file (wildcards allowed).
; Each OPcache blacklist file is a text file that holds the names of files
; that should not be accelerated.
opcache.blacklist_filename=<%= @blacklist_filename %>

; Allows exclusion of large files from being cached. By default all files
; are cached.
opcache.max_file_size=<%= @max_file_size %>

; Check the cache checksum each N requests.
; The default value of "0" means that the checks are disabled.
;opcache.consistency_checks=<%= @consistency_checks %>

; How long to wait (in seconds) for a scheduled restart to begin if the cache
; is not being accessed.
opcache.force_restart_timeout=<%= @force_restart_timeout %>

; OPcache error_log file name. Empty string assumes "stderr".
<% if @error_log == '' -%>
;opcache.error_log=
<% else -%>
opcache.error_log=<%= @error_log %>
<% end -%>

; All OPcache errors go to the Web server log.
; By default, only fatal errors (level 0) or errors (level 1) are logged.
; You can also enable warnings (level 2), info messages (level 3) or
; debug messages (level 4).
<% if @log_verbosity_level == '' -%>
;opcache.log_verbosity_level=1
<% else -%>
opcache.log_verbosity_level=<%= @log_verbosity_level %>
<% end -%>

; Preferred Shared Memory back-end. Leave empty and let the system decide.
opcache.preferred_memory_model=<%= @preferred_memory_model %>

; Protect the shared memory from unexpected writing during script execution.
; Useful for internal debugging only.
opcache.protect_memory=<%= @protect_memory %>

; Allows calling OPcache API functions only from PHP scripts which path is
; started from specified string. The default "" means no restriction
;opcache.restrict_api=

; Enables and sets the second level cache directory.
; It should improve performance when SHM memory is full, at server restart or
; SHM reset. The default "" disables file based caching.
; RPM note : file cache directory must be owned by process owner
;   for mod_php, see /etc/httpd/conf.d/php.conf
;   for php-fpm, see /etc/php-fpm.d/*conf
;opcache.file_cache=

; Enables or disables opcode caching in shared memory.
;opcache.file_cache_only=0

; Enables or disables checksum validation when script loaded from file cache.
;opcache.file_cache_consistency_checks=1

; Implies opcache.file_cache_only=1 for a certain process that failed to
; reattach to the shared memory (for Windows only). Explicitly enabled file
; cache is required.
;opcache.file_cache_fallback=1

; Validate cached file permissions.
; Leads OPcache to check file readability on each access to cached file.
; This directive should be enabled in shared hosting environment, when few
; users (PHP-FPM pools) reuse the common OPcache shared memory.
;opcache.validate_permission=0

; Prevent name collisions in chroot'ed environment.
; This directive prevents file name collisions in different "chroot"
; environments. It should be enabled for sites that may serve requests in
; different "chroot" environments.
;opcache.validate_root=0

; Enables or disables copying of PHP code (text segment) into HUGE PAGES.
; This should improve performance, but requires appropriate OS configuration.
;opcache.huge_code_pages=1
